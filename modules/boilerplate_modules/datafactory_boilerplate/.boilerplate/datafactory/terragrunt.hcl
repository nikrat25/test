
# This is a Terragrunt module generated by boilerplate.
terraform {
  source = "${include.envcommon.locals.base_source_url_github}//datafactory?ref=${include.envcommon.locals.datafactory_version}"
}

include "root" {
  path   = find_in_parent_folders("root.hcl")
  expose = true
}

include "envcommon" {
  path   = "${dirname(find_in_parent_folders("root.hcl"))}/_envcommon/pdap.hcl"
  expose = true
}

dependency "entra_lookup" {
  config_path = "../entra_lookup"
}

dependency "lookup" {
  config_path = "../../../lookup"
}

dependency "product" {
  config_path = "../product"
}

dependency "solutionsettings" {
  config_path = "../solutionsettings"
}

dependency "resource_group" {
  config_path = "../resource_group"
}


inputs = {
  # --------------------------------------------------------------------------------------------------------------------
  # Required input variables
  # --------------------------------------------------------------------------------------------------------------------

  # Description: (variable solution_settings did not define a description)
  # Type: any
  solution_settings = dependency.solutionsettings.outputs.settings

  # Description: (variable tags did not define a description)
  # Type: map
  tags = dependency.solutionsettings.outputs.tags

  # Description: Name of SNet 1. This should be provided by the root main.tf, collected from the PLTMGT outputs.
  # Type: string
  private_subnet_name = "{{.private_subnet_name}}"

  # Description: Key Vault id - mandatory
  # Type: string
  key_vault_id = dependency.product.outputs.key_vault_id

  # Description: log analytics workspace id - mandatory
  # Type: string
  log_id = dependency.lookup.outputs.log_analytics_id


  # --------------------------------------------------------------------------------------------------------------------
  # Optional input variables
  # Uncomment the ones you wish to set
  # --------------------------------------------------------------------------------------------------------------------

  # Description: Azure Devops git integration is required
  # Type: bool
  # gitShouldApplyVSTSConfig = false

  # Description: Github git integration is required
  # Type: bool
  # gitShouldApplyGithubConfig = false

  # Description: The project name where the Git Repos is for ADF. Will default to the solution name
  # Type: string
  # gitProjectName = ""

  # Description: Name of the Devops Account
  # Type: string
  # gitAccountName = "marsanalytics"

  # Description: Name of the Devops Git Repos where the ADF code is created, if not provided then defaults to the solutionname
  # Type: string
  # gitRepositoryName = ""

  # Description: Name of the git collaboration branch for datafactory
  # Type: string
  # gitBranchName = "development"

  # Description: The root folder within the repos where you want Data Factory to save the source files
  # Type: string
  # gitADFRootFolder = "/data-factory"

  # Description: Github URL for the configuration for Data Factory
  # Type: string
  # gitRepositoryURL = "https://github.com"

  # Description: Is Managed Virtual Network enabled
  # Type: bool
  {{if .managed_virtual_network_enabled}}
  managed_virtual_network_enabled = true
  {{else}}
  managed_virtual_network_enabled = false
  {{end}}

  # Description: Is public network enabled for ADF
  # Type: bool
  {{if .public_network_enabled}}
  public_network_enabled = true
  {{else}}
  # public_network_enabled = false
  {{end}}

  # Description: Private endpoint name for this container registry
  # Type: string
  # private_endpoint_name = ""

  # Description: Private service connection name for this container registry
  # Type: string
  # private_service_connection_name = ""

  # Description: (variable adf_managed_pe_integrations did not define a description)
  # Type: map
  {{if .adf_managed_pe_integrations}}
  adf_managed_pe_integrations = {{.adf_managed_pe_integrations}}
  {{else}}
  # adf_managed_pe_integrations = {}
  {{end}}
}