
# This is a Terragrunt module generated by boilerplate.
terraform {
  source = "${include.envcommon.locals.base_source_url_azdo}//pdap/modules/product?ref=${include.envcommon.locals.product_version}"
}

include "root" {
  path   = find_in_parent_folders("root.hcl")
  expose = true
}

include "envcommon" {
  path   = "${dirname(find_in_parent_folders("root.hcl"))}/_envcommon/pdap.hcl"
  expose = true
}

dependency "solutionsettings" {
  config_path = "../solutionsettings"
}


dependency "entra_lookup" {
  config_path = "../entra_lookup"
}

dependency "lookup" {
  config_path = "../../../lookup"
}

inputs = {
  # --------------------------------------------------------------------------------------------------------------------
  # Required input variables
  # --------------------------------------------------------------------------------------------------------------------

  # Description: (variable solution_settings did not define a description)
  # Type: any
  solution_settings = dependency.solutionsettings.outputs.settings

  # Description: (variable tags did not define a description)
  # Type: map
  tags = dependency.solutionsettings.outputs.tags

  # Description: Name of the product.
  # Type: string
  name = include.root.locals.product

  # Description: The name of the domain e.g. mvhbanfield or pncore
  # Type: string
  domain_name = include.root.locals.banner

  # Description: Name of the division being deployed (Used in tags and provisioner group in KV).
  # Type: string
  division_name = include.root.locals.division

  # Description: The name of the secure resource group.
  # Type: string
  kv_resource_group_name = upper("${include.root.locals.banner}-KV-${include.root.locals.region}-${include.root.locals.environment}-RG")

  # Description: The id of the log analytics to integrate with, use the log analytics module to get this result.
  # Type: string
  log_analytics_id = dependency.lookup.outputs.log_analytics_id

  # Description: List of owners of the product. (object_ids)
  # Type: list
  owners = setunion(
    [
      dependency.lookup.outputs.god_mode_sp.object_id,
      dependency.lookup.outputs.this.object_id
    ],
    dependency.entra_lookup.outputs.users.object_ids
  )

  # Description: Object with storage account ids.
  # Type: object
  storage_account_ids = {
    general = dependency.lookup.outputs.storage_accounts["general"].id
    lake    = dependency.lookup.outputs.storage_accounts["lake"].id
    vault   = dependency.lookup.outputs.storage_accounts["vault"].id
  }


  # --------------------------------------------------------------------------------------------------------------------
  # Optional input variables
  # Uncomment the ones you wish to set
  # --------------------------------------------------------------------------------------------------------------------

  # Description: Additional group settings to be added to the product default group settings.
  # Type: map
  additional_group_settings = {
    WRITER = { parent_group_ids = [dependency.lookup.outputs.shared_group_writer_id] }
    READER = { parent_group_ids = [dependency.lookup.outputs.shared_group_reader_id] }
  }


  # Description: Description of the group
  # Type: string
  description = "{{.Description}}"

  # Description: Custom product topology path for creating folder structure.
  # Type: string
  product_path = "{{.Path}}"

  # Description: Value of the subnet id where the AKV pe is deployed.
  # Type: string
  # akv_subnet = "akvpesnet-001"

  # Description: Value of the prefix for the AKV.
  # Type: string
  # kv_prefix = ""

  # Description: Central CMDB ID for the product.
  # Type: string
  cmdb_id = dependency.solutionsettings.outputs.tags["CMDB"]

}
