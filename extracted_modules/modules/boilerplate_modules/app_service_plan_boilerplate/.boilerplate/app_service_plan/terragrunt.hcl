
# This is a Terragrunt module generated by boilerplate.
terraform {
  source = "${include.envcommon.locals.base_source_url_github}//app_service_plan?ref=app_service_plan-v-2.3.0"
}

include "root" {
  path   = find_in_parent_folders("root.hcl")
  expose = true
}

include "envcommon" {
  path   = "${dirname(find_in_parent_folders("root.hcl"))}/_envcommon/pdap.hcl"
  expose = true
}

dependency "entra_lookup" {
  config_path = "../entra_lookup"
}

dependency "lookup" {
  config_path = "../../../lookup"
}

dependency "product" {
  config_path = "../product"
}

dependency "solutionsettings" {
  config_path = "../solutionsettings"
}

dependencies {
  paths = ["../resource_group"]
}
inputs = {
  # --------------------------------------------------------------------------------------------------------------------
  # Required input variables
  # --------------------------------------------------------------------------------------------------------------------

  # Description: (variable solution_settings did not define a description)
  # Type: any
  solution_settings = dependency.solutionsettings.outputs.settings 

  # Description: (variable tags did not define a description)
  # Type: map
  tags = dependency.solutionsettings.outputs.tags 


  # --------------------------------------------------------------------------------------------------------------------
  # Optional input variables
  # Uncomment the ones you wish to set
  # --------------------------------------------------------------------------------------------------------------------

  # Description: Use to set a non standard name for the service plan, by default the name will be generated based on the solution name
  # Type: string
  {{if .app_service_plan_name}}
  app_service_plan_name = "{{.app_service_plan_name}}"
  {{else}}
  # app_service_plan_name = ""
  {{end}}

  # Description: The type of app service plan you want either Windows or Linux, defaults to Windows
  # Type: string
  {{if .os_type}}
  os_type = "{{.os_type}}"
  {{else}}
  # os_type = "Linux"
  {{end}}

  # Description: The size of the App service; small - (Dev:B1/Prpd:S1/Prod:S1), medium - (Dev:B2/Prpd:S2/Prod:S2), premium - (Dev:P1v2/Prpd:P1v2/Prod:P1v2), premiumv3 - (Dev:P1v3/Prpd:P1v3/Prod:P1v3), premiumlarge - (Dev:P2v3/Prpd:P2v3/Prod:P2v3), premiumxlarge - (Dev:P3v3/Prpd:P3v3/Prod:P3v3)
  # Type: string
  {{if .size}}
  size = "{{.size}}"
  {{else}}
  # size = "small"
  {{end}}

  # Description: The number of instances
  # Type: number
  {{if .worker_count}}
  worker_count = {{.worker_count}}
  {{else}}
  # worker_count = 1
  {{end}}

  # Description: Optional varaible to set the azure region where you want the databricks workspace.  By default this will be the main solution location
  # Type: string
  {{if .location}}
  location = "{{.location}}"
  {{else}}
  # location = ""
  {{end}}

  # Description: The ID of the subnet the app service will be associated to (the subnet must have a service_delegation configured for Microsoft.Web/serverFarms)
  # Type: string
  {{if .integration_subnet_name}}
  integration_subnet_name = "{{.integration_subnet_name}}"
  {{else}}
  # integration_subnet_name = "appsnet-001"
  {{end}}

  # Description: Should the Service Plan balance across Availability Zones in the region. Changing this forces a new resource to be created.
  # Type: bool
  {{if .zone_balancing_enabled}}
  zone_balancing_enabled = {{.zone_balancing_enabled}}
  {{else}}
  # zone_balancing_enabled = false
  {{end}}

  # Description: Existing app service plan rg name
  # Type: string
  {{if .app_service_plan_rg}}
  app_service_plan_rg = "{{.app_service_plan_rg}}"
  {{else}}
  # app_service_plan_rg = ""
  {{end}}

}
